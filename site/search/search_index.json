{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude97 Tesla Stock Forecasting (Enhanced Blueprint)","text":"<p>Welcome to the documentation for the Tesla Stock Forecasting Project. This enhanced version integrates detailed steps from exploratory data analysis to advanced modeling techniques.</p>"},{"location":"#project-overview","title":"\ud83d\udcd8 Project Overview","text":"<p>This project explores advanced time series forecasting techniques applied to Tesla Inc. (TSLA) stock prices using statistical, seasonal, deep learning, and hybrid models.</p>"},{"location":"#main-sections","title":"\ud83d\udccc Main Sections","text":"<ul> <li>\u2705 Data acquisition and preprocessing  </li> <li>\ud83d\udcca Exploratory data analysis  </li> <li>\ud83d\udcc8 Model development (ARIMA, SARIMA, ARIMAX, LSTM)  </li> <li>\ud83e\uddea Model evaluation and comparison  </li> <li>\ud83d\ude80 Deployment suggestions</li> <li>\ud83e\uddea Seasonal decomposition (STL &amp; classical) for diagnostic insight</li> </ul>"},{"location":"#documentation-links","title":"\ud83d\udcc2 Documentation Links","text":"<ul> <li>\ud83d\udcc4 Preprocessing Summary </li> <li>\ud83d\udcca Exploratory Data Analysis </li> <li>\ud83d\udcd8 Classical Time Series Modeling </li> <li>\ud83e\uddee SARIMA &amp; SARIMAX Results </li> <li>\ud83e\uddf1 Project Structure Overview</li> <li>\ud83e\udde0 Seasonal Decomposition Visuals</li> </ul>"},{"location":"#github-repository","title":"\ud83d\udd17 GitHub Repository","text":"<p>Access the full project and codebase here: \ud83d\udc49 https://github.com/SOSPETER03/tesla-stock-forecasting</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Tesla Stock Forecasting Project","text":"<p>Thank you for considering contributing to this project! We welcome all kinds of contributions including bug reports, feature suggestions, improvements to documentation, and code contributions.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"\ud83d\udccc How to Contribute","text":""},{"location":"CONTRIBUTING/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Click on the \"Fork\" button at the top right of the GitHub repository.</p>"},{"location":"CONTRIBUTING/#2-clone-your-fork","title":"2. Clone Your Fork","text":"<pre><code>git clone https://github.com/YOUR_USERNAME/tesla-stock-forecasting.git\ncd tesla-stock-forecasting\n</code></pre>"},{"location":"CONTRIBUTING/#3-create-a-new-branch","title":"3. Create a New Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"CONTRIBUTING/#4-make-your-changes","title":"4. Make Your Changes","text":""},{"location":"CONTRIBUTING/#5-commit-and-push","title":"5. Commit and Push","text":"<pre><code>git add .\ngit commit -m \"Your detailed commit message\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"CONTRIBUTING/#6-submit-a-pull-request","title":"6. Submit a Pull Request","text":"<p>Go to your fork on GitHub and click \u201cNew Pull Request.\u201d</p>"},{"location":"CONTRIBUTING/#code-style-and-testing","title":"\ud83e\uddea Code Style and Testing","text":"<ul> <li>Follow PEP8 guidelines for Python code.</li> <li>Use meaningful variable and function names.</li> <li>If adding new models or methods, please include test cases or evaluation metrics.</li> </ul>"},{"location":"CONTRIBUTING/#questions-or-suggestions","title":"\ud83d\udcac Questions or Suggestions?","text":"<p>Feel free to open an issue for any questions, bugs, or feature requests.</p> <p>Let\u2019s make financial forecasting smarter \u2014 together! \ud83d\ude80</p>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/","title":"Advanced Time Series Forecasting of Tesla Stock","text":""},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#comparative-analysis-blueprint-enhanced","title":"Comparative Analysis Blueprint (Enhanced)","text":""},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#1-data-acquisition-preparation","title":"1. Data Acquisition &amp; Preparation","text":"<ul> <li>Download Tesla stock data using <code>yfinance</code></li> <li>Clean missing values (forward fill, interpolation)</li> <li>Convert 'Date' to datetime and set as index</li> <li>Feature Engineering:</li> <li>Daily returns</li> <li>Log returns</li> <li>Lag features</li> <li>Rolling statistics (mean, std)</li> <li>Outlier detection using boxplots and IQR</li> <li>Initial data checks: shape, data types, and frequency range</li> <li>Visual and statistical stationarity checks (ADF &amp; KPSS)</li> <li>Differencing as needed to achieve stationarity</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#2-exploratory-data-analysis-eda","title":"2. Exploratory Data Analysis (EDA)","text":"<ul> <li>Visualize closing price, returns, and volatility</li> <li>Boxplot analysis for outliers in returns and volume</li> <li>Descriptive stats: mean, std, skewness, kurtosis</li> <li>ACF/PACF plots for lags and autocorrelation</li> <li>STL decomposition or moving average smoothing</li> <li>Correlation matrix of engineered features</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#3-classical-time-series-modeling","title":"3. Classical Time Series Modeling","text":"<ul> <li>Fit AR, MA, ARIMA models</li> <li>Use ACF/PACF to guide parameter selection</li> <li>Fit via Maximum Likelihood Estimation (MLE)</li> <li>Evaluate using:</li> <li>AIC / BIC</li> <li>RMSE / MAE / MAPE</li> <li>Residual diagnostics (Ljung-Box, ACF of residuals)</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#4-seasonal-modeling-sarima","title":"4. Seasonal Modeling (SARIMA)","text":"<ul> <li>Identify seasonal period (e.g., 12 months)</li> <li>Apply SARIMA(P,D,Q)(p,d,q)[s] structure</li> <li>Perform seasonal differencing</li> <li>Evaluate seasonal model performance and diagnostics</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#5-exogenous-predictor-models-arimax-sarimax","title":"5. Exogenous Predictor Models (ARIMAX / SARIMAX)","text":"<ul> <li>Add regressors: Volume, Lagged Returns, or macro indicators</li> <li>Fit SARIMAX model to capture both seasonality and exogenous variables</li> <li>Evaluate and compare with SARIMA</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#6-seasonal-decomposition","title":"6. Seasonal Decomposition","text":"<ul> <li>Use STL or classical decomposition</li> <li>Extract and visualize trend, seasonality, and residuals</li> <li>Use insights to refine SARIMA or ARIMA model configs</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#7-deep-learning-with-lstm","title":"7. Deep Learning with LSTM","text":"<ul> <li>Normalize data, generate sequences</li> <li>Create LSTM architecture (LSTM \u2192 Dropout \u2192 Dense)</li> <li>Train/test split, batch training</li> <li>Visualize predicted vs. actual values</li> <li>Compare LSTM to ARIMA and SARIMA</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#8-hybrid-modeling","title":"8. Hybrid Modeling","text":"<ul> <li>Combine ARIMA trend modeling with LSTM residual modeling</li> <li>Use hybrid forecasts to improve accuracy</li> <li>Compare hybrid vs standalone models</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#9-model-evaluation-comparison","title":"9. Model Evaluation &amp; Comparison","text":"<ul> <li>Compare ARIMA, SARIMA, ARIMAX, LSTM, Hybrid</li> <li>Metrics: RMSE, MAE, MAPE, AIC, BIC</li> <li>Residual plots and Ljung-Box test</li> <li>Forecast accuracy summary table</li> <li>Optional: Diebold-Mariano test for statistical significance</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#10-conclusion-recommendations","title":"10. Conclusion &amp; Recommendations","text":"<ul> <li>Highlight best model(s) for Tesla stock forecasting</li> <li>Note strengths in handling seasonality or volatility</li> <li>Recommend appropriate use cases for each model</li> <li>Discuss limitations and future improvements</li> </ul>"},{"location":"Tesla_Stock_Forecasting_Enhanced_Blueprint/#11-future-work","title":"11. Future Work","text":"<ul> <li>Integrate Facebook Prophet for trend-seasonality forecasting</li> <li>Add macroeconomic variables (interest rates, inflation)</li> <li>Deploy using Streamlit or Flask</li> <li>Automate retraining via GitHub Actions</li> </ul>"},{"location":"classical_models/","title":"Classical Time Series Models","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport os\n\n# Load cleaned data\ndata_path = \"../data/processed/Tesla_Cleaned.csv\"\ndf = pd.read_csv(data_path, parse_dates=[\"Date\"], index_col=\"Date\")\ndf = df.asfreq('B')  # business day frequency\ndf['Close'] = df['Close'].interpolate()\n</code></pre> <pre><code>plot_acf(df[\"Close\"].dropna(), lags=40)\nplt.title(\"ACF of Close Prices\")\nplt.show()\n\nplot_pacf(df[\"Close\"].dropna(), lags=40)\nplt.title(\"PACF of Close Prices\")\nplt.show()\n</code></pre> <pre><code># Fit ARIMA model \u2013 example with (1,1,1)\nmodel = ARIMA(df[\"Close\"], order=(1,1,1))\nresults = model.fit()\nprint(results.summary())\n</code></pre> <pre><code>C:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\statespace\\sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n  warn('Non-stationary starting autoregressive parameters'\nC:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\statespace\\sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n  warn('Non-invertible starting MA parameters found.'\n\n\n                               SARIMAX Results                                \n==============================================================================\nDep. Variable:                  Close   No. Observations:                 2358\nModel:                 ARIMA(1, 1, 1)   Log Likelihood               -7378.920\nDate:                Wed, 07 May 2025   AIC                          14763.839\nTime:                        08:49:13   BIC                          14781.135\nSample:                    01-02-2015   HQIC                         14770.137\n                         - 01-16-2024                                         \nCovariance Type:                  opg                                         \n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nar.L1         -0.7061      0.149     -4.726      0.000      -0.999      -0.413\nma.L1          0.6789      0.155      4.369      0.000       0.374       0.983\nsigma2        30.6735      0.330     92.939      0.000      30.027      31.320\n===================================================================================\nLjung-Box (L1) (Q):                   0.43   Jarque-Bera (JB):             15947.58\nProb(Q):                              0.51   Prob(JB):                         0.00\nHeteroskedasticity (H):             539.95   Skew:                            -0.10\nProb(H) (two-sided):                  0.00   Kurtosis:                        15.74\n===================================================================================\n\nWarnings:\n[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n</code></pre> <pre><code>residuals = results.resid\nplt.figure(figsize=(10, 4))\nplt.subplot(121)\nplot_acf(residuals.dropna(), lags=40)\nplt.title(\"ACF of Residuals\")\n\nplt.subplot(122)\nsns.histplot(residuals, kde=True)\nplt.title(\"Residual Distribution\")\nplt.tight_layout()\nplt.show()\n\n# Ljung-Box test\nlb_test = acorr_ljungbox(residuals, lags=[10], return_df=True)\nprint(\"Ljung-Box Test:\\n\", lb_test)\n</code></pre> <pre><code>Ljung-Box Test:\n       lb_stat  lb_pvalue\n10  46.134845   0.000001\n</code></pre> <pre><code>df[\"forecast\"] = results.predict(start=0, end=len(df)-1)\nrmse = np.sqrt(mean_squared_error(df[\"Close\"], df[\"forecast\"]))\nmae = mean_absolute_error(df[\"Close\"], df[\"forecast\"])\nmape = np.mean(np.abs((df[\"Close\"] - df[\"forecast\"]) / df[\"Close\"])) * 100\n\nprint(f\"RMSE: {rmse:.4f}, MAE: {mae:.4f}, MAPE: {mape:.2f}%\")\n\ndf[[\"Close\", \"forecast\"]].plot(figsize=(12,5), title=\"ARIMA Forecast vs Actual\")\nplt.show()\n</code></pre> <pre><code>RMSE: 5.5454, MAE: 2.7561, MAPE: 2.42%\n</code></pre> <pre><code>import pandas as pd\nfrom statsmodels.tsa.arima.model import ARIMA\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nimport os\n\n# Load the cleaned dataset using the absolute path\ndf = pd.read_csv(\n    \"C:/Users/sospeter/PycharmProjects/pythonProject/tesla-stock-forecasting/data/processed/Tesla_Cleaned.csv\",\n    parse_dates=[\"Date\"],\n    index_col=\"Date\"\n)\n\n# Fit ARIMA(1,1,1)\nmodel = ARIMA(df[\"Close\"], order=(1, 1, 1))\nresults = model.fit()\n\n# Extract residuals\nresiduals = results.resid\n\n# Save ACF plot of residuals\nfig = plot_acf(residuals)\nos.makedirs(\"results/figures\", exist_ok=True)\nfig.savefig(\"results/figures/arima_residual_acf.png\")\nplt.close()\n\nprint(\"\u2705 Residual ACF plot saved.\")\n</code></pre> <pre><code>C:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\nC:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\nC:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n\n\n\u2705 Residual ACF plot saved.\n</code></pre> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nimport os\n\n# Load the cleaned dataset\ndf = pd.read_csv(r\"C:\\Users\\sospeter\\PycharmProjects\\pythonProject\\tesla-stock-forecasting\\data\\processed\\Tesla_Cleaned.csv\", \n                 parse_dates=[\"Date\"], index_col=\"Date\")\n\n\n\n# Fit ARIMA(1,1,1) model\nmodel = ARIMA(df[\"Close\"], order=(1, 1, 1))\nresults = model.fit()\n\n# Generate in-sample predictions (same length as data)\ndf[\"predicted\"] = results.predict(start=1, end=len(df)-1, dynamic=False)\n\n# Plot Actual vs Predicted\nplt.figure(figsize=(10, 5))\nplt.plot(df[\"Close\"], label=\"Actual\", linewidth=2)\nplt.plot(df[\"predicted\"], label=\"Predicted\", linewidth=2, linestyle='--')\nplt.title(\"Actual vs Predicted Closing Prices (ARIMA Model)\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.legend()\n\n# Ensure the save directory exists\nfig_path = \"results/figures\"\nos.makedirs(fig_path, exist_ok=True)\nplt.savefig(os.path.join(fig_path, \"arima_actual_vs_predicted.png\"))\nplt.close()\n\nprint(\"\u2705 Actual vs Predicted plot saved to results/figures/arima_actual_vs_predicted.png\")\n</code></pre> <pre><code>C:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\nC:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\nC:\\Users\\sospeter\\PycharmProjects\\pythonProject\\.venv1\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n\n\n\u2705 Actual vs Predicted plot saved to results/figures/arima_actual_vs_predicted.png\n</code></pre> <pre><code>\n</code></pre>"},{"location":"eda/","title":"\ud83d\udcca Exploratory Data Analysis (EDA)","text":"<p>This section presents visual and statistical analysis of Tesla\u2019s historical stock behavior to inform model development.</p>"},{"location":"eda/#1-tesla-closing-price-over-time","title":"1. \ud83d\udcc8 Tesla Closing Price Over Time","text":"<p> Interpretation: Tesla\u2019s stock price exhibits exponential growth from late 2019 to 2022, followed by high volatility. This trend reflects investor enthusiasm and market dynamics.</p>"},{"location":"eda/#2-daily-returns-over-time","title":"2. \ud83d\udd01 Daily Returns Over Time","text":"<p> Interpretation: Returns are centered around zero with spikes during major events (e.g., 2020 pandemic). Modeling returns captures short-term fluctuations and risk.</p>"},{"location":"eda/#3-20-day-rolling-volatility","title":"3. \ud83d\udcc9 20-Day Rolling Volatility","text":"<p> Interpretation: Volatility surged during 2020 and 2022, aligning with market uncertainty. Rolling volatility helps evaluate changing risk.</p>"},{"location":"eda/#4-outlier-detection-via-boxplots","title":"4. \ud83e\uddea Outlier Detection via Boxplots","text":"<p>Returns: </p> <p>Volume: </p> <p>Interpretation: Outliers in returns and volume highlight extreme events. These may influence model sensitivity and require preprocessing.</p>"},{"location":"eda/#5-descriptive-statistics","title":"5. \ud83d\udcca Descriptive Statistics","text":"Feature Mean Skewness Kurtosis Return 0.0018 0.179 4.34 Log Return 0.0012 -0.159 4.52 Rolling Std (20) 6.73 1.69 2.94 Volume 1.14e+08 2.74 13.33 <p>Interpretation: Non-normal behavior in volume (high kurtosis, skewness) suggests episodic surges in trading activity.</p>"},{"location":"eda/#6-correlation-matrix","title":"6. \ud83d\udd17 Correlation Matrix","text":"<p> Interpretation: Strong correlation between lag and rolling features confirms temporal structure. Weak correlation between volume and return aligns with financial theory.</p>"},{"location":"eda/#7-acf-and-pacf-of-returns","title":"7. \ud83d\udd04 ACF and PACF of Returns","text":"<p>ACF: </p> <p>PACF: </p> <p>Interpretation: Lag 1 exhibits weak autocorrelation. Higher-order lags contribute little, supporting simpler AR/MA models.</p>"},{"location":"eda/#8-stl-decomposition","title":"8. \ud83d\udcc9 STL Decomposition","text":"<p>Trend: </p> <p>Seasonal: </p> <p>Residual: </p> <p>Interpretation: A strong upward trend and mild seasonality are present. Residuals highlight irregular fluctuations for model calibration.</p>"},{"location":"index-checkpoint/","title":"Tesla Stock Forecasting (Enhanced Blueprint)","text":"<p>Welcome to the documentation for the Tesla Stock Forecasting Project. This enhanced version integrates detailed steps from exploratory data analysis to advanced modeling techniques.</p>"},{"location":"index-checkpoint/#project-overview","title":"\ud83d\udcd8 Project Overview","text":"<p>This project explores advanced time series forecasting techniques applied to Tesla Inc. (TSLA) stock prices using statistical, seasonal, deep learning, and hybrid models.</p>"},{"location":"index-checkpoint/#main-sections","title":"\ud83d\udccc Main Sections","text":"<ul> <li>Data acquisition and preprocessing</li> <li>Exploratory data analysis</li> <li>Model development (ARIMA, SARIMA, ARIMAX, LSTM)</li> <li>Model evaluation and comparison</li> <li>Deployment suggestions</li> </ul>"},{"location":"index-checkpoint/#additional-resources","title":"\ud83d\udcc2 Additional Resources","text":"<ul> <li>View Preprocessing Summary</li> <li>View Exploratory Data Analysis</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>pip</li> </ul>"},{"location":"installation/#setup","title":"Setup","text":"<pre><code>git clone https://github.com/SOSPETER03/tesla-stock-forecasting.git\ncd tesla-stock-forecasting\npython -m venv .venv\n.venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#run-the-pipeline","title":"Run the Pipeline","text":"<pre><code>python main.py\n</code></pre>"},{"location":"preprocessing/","title":"\ud83e\uddfc Preprocessing Summary","text":""},{"location":"preprocessing/#initial-data-checks","title":"\u2714\ufe0f Initial Data Checks","text":"<ul> <li>Rows &amp; Columns: 2,274 rows \u00d7 5 columns</li> <li>Date Range: 2015-01-02 to 2024-01-16</li> <li>Data Types:</li> <li>Open, High, Low, Close \u2192 float64</li> <li>Volume \u2192 int64</li> <li>Datetime Index Set: Yes</li> <li>Frequency Check: Could not be inferred (irregular calendar days)</li> </ul>"},{"location":"preprocessing/#feature-engineering","title":"\ud83d\udee0 Feature Engineering","text":"<ul> <li><code>return</code>: Daily percentage change of the closing price</li> <li><code>log_return</code>: Natural log of (1 + return)</li> <li><code>close_lag1</code>: Previous day's closing price</li> <li><code>rolling_mean_20</code>: 20-day moving average of Close</li> <li><code>rolling_std_20</code>: 20-day rolling standard deviation (volatility)</li> </ul>"},{"location":"preprocessing/#outlier-detection","title":"\ud83d\udce6 Outlier Detection","text":"<ul> <li>Return Outliers: 143 (via IQR method and boxplot)</li> <li>Volume Outliers: 162 (indicative of major trading events or anomalies)</li> </ul>"},{"location":"preprocessing/#stationarity-testing","title":"\ud83d\udd0e Stationarity Testing","text":"<ul> <li>ADF Test (Close): p = 0.6687 \u2192 Non-stationary</li> <li>KPSS Test (Close): p = 0.0100 \u2192 Trend non-stationary</li> <li>Differencing Applied: 1st order (<code>d = 1</code>)</li> <li>\u2705 Stationarity achieved after differencing</li> </ul>"},{"location":"project-plan/","title":"Project Plan","text":""},{"location":"project-plan/#data-source","title":"Data Source","text":"<ul> <li>Yahoo Finance (via yfinance)</li> <li>Ticker: TSLA</li> <li>Date Range: 2015\u20132024</li> </ul>"},{"location":"project-plan/#planned-models","title":"Planned Models","text":"<ul> <li>ARIMA / SARIMA</li> <li>ARIMAX / SARIMAX</li> <li>Seasonal Decomposition</li> <li>LSTM (RNN)</li> <li>Hybrid (ARIMA + LSTM)</li> </ul>"},{"location":"project-plan/#evaluation","title":"Evaluation","text":"<ul> <li>RMSE, MAE, MAPE</li> <li>AIC/BIC (classical models)</li> <li>Residual diagnostics (Ljung-Box test)</li> </ul>"},{"location":"results/","title":"Results & Evaluation","text":""},{"location":"results/#outlier-detection-boxplots","title":"\ud83d\udce6 Outlier Detection Boxplots","text":"<p>The following boxplots help visualize potential outliers in Tesla stock data:</p>"},{"location":"results/#return-distribution","title":"\ud83d\udd39 Return Distribution","text":"<p>This boxplot visualizes the daily return distribution of Tesla stock. Most returns cluster tightly around zero, indicating overall price stability on a day-to-day basis. However, there are several significant outliers both above and below, representing days of unusual gains or losses, likely due to earnings announcements or market shocks.</p>"},{"location":"results/#volume-distribution","title":"\ud83d\udd39 Volume Distribution","text":"<p>The boxplot for trading volume shows a wide range with a heavy upper tail. This indicates that while most days have moderate trading activity, there are several high-volume outliers, which may coincide with news events, quarterly earnings releases, or broader market moves. Such spikes in volume often reflect investor reactions to new information or speculation.</p>"},{"location":"results/#arima-model-evaluation-summary","title":"ARIMA Model Evaluation Summary","text":"<p>We fit an ARIMA(1,1,1) model to Tesla's closing stock prices. Key evaluation metrics:</p> <ul> <li>AIC: 14,763.84</li> <li>BIC: 14,781.14</li> <li>Log Likelihood: -7,378.92</li> <li>RMSE: ~5.53 (computed from predictions)</li> <li>Residual Diagnostics:</li> <li>Ljung-Box Q (lag 1): 0.43 (p \u2248 0.51) \u2192 residuals uncorrelated</li> <li>Jarque-Bera: 15,947.58 (p &lt; 0.001) \u2192 residuals not normally distributed</li> <li>Heteroskedasticity: Strong presence (H = 539.95)</li> <li>Skewness: -0.10</li> <li>Kurtosis: 15.74 (leptokurtic)</li> </ul>"},{"location":"results/#overall-arima111-captures-short-term-dynamics-but-residuals-indicate-volatility-clustering-and-heavy-tails-suitable-for-baseline-forecasting","title":"Overall, ARIMA(1,1,1) captures short-term dynamics but residuals indicate volatility clustering and heavy tails. Suitable for baseline forecasting.","text":""},{"location":"results/#stl-decomposition-for-seasonal-structure","title":"\ud83d\udd01 STL Decomposition for Seasonal Structure","text":"<p>We performed Seasonal-Trend Decomposition using Loess (STL) to separate the Tesla closing price into trend, seasonal, and residual components.</p>"},{"location":"results/#trend-component","title":"\ud83d\udd39 Trend Component","text":"<p> The trend captures the long-term upward trajectory of Tesla stock, showing acceleration during 2020\u20132021 and some plateauing post-2022.</p>"},{"location":"results/#seasonal-component","title":"\ud83d\udd39 Seasonal Component","text":"<p> The seasonal component reveals mild recurring monthly fluctuations, suggesting a 12-period seasonality \u2014 validating the use of SARIMA\u2019s seasonal order <code>(P,D,Q,12)</code>.</p> <p>Interpretation: The presence of clear seasonal patterns and long-term trend justifies SARIMA over standard ARIMA. Residuals from STL showed no strong periodicity beyond this.</p>"},{"location":"results/#sarima-model-evaluation-summary","title":"\ud83d\udcc8 SARIMA Model Evaluation Summary","text":""},{"location":"results/#seasonal-decomposition-analysis","title":"\ud83e\udde0 Seasonal Decomposition Analysis","text":"<p>To better inform seasonal model configurations, we applied both STL decomposition and classical seasonal decomposition on Tesla\u2019s closing price.</p>"},{"location":"results/#stl-decomposition-seasonal-trend-using-loess","title":"\ud83d\udcca STL Decomposition (Seasonal-Trend using Loess)","text":"<p>Interpretation: - Trend: Shows strong upward movement, especially during 2020\u20132021. - Seasonal: Regular, mild repeating cycles validate using SARIMA(\u00b7,\u00b7,\u00b7)(\u00b7,\u00b7,\u00b7,12). - Residuals: No clear leftover structure, indicating good seasonal capture.</p>"},{"location":"results/#classical-decomposition","title":"\ud83d\udcca Classical Decomposition","text":"<p>Interpretation: - Reinforces STL insights. - Slightly less smooth components than STL. - Confirms stable 12-month seasonality, supporting SARIMA\u2019s seasonal configuration.</p>"},{"location":"structure/","title":"Project Structure","text":"<pre><code>tesla-stock-forecasting/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 processed/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 preprocessing/\n\u2502   \u2514\u2500\u2500 visualization/\n\u251c\u2500\u2500 results/\n\u2502   \u251c\u2500\u2500 figures/\n\u2502   \u2514\u2500\u2500 models/\n\u251c\u2500\u2500 notebooks/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n</code></pre> <p>This structure separates raw data, source code, results, and notebooks to support clean, modular analysis.</p>"}]}